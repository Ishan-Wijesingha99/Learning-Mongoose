
// usually we create a seperate js file for each schema and we just export it

const mongoose = require('mongoose');
const { stringify } = require('querystring');

// this is how you create a new Schema, you use the Schema constructor function
// it takes an object, this object has key-value pairs for the properties you want each document entree to have
const userSchema = new mongoose.Schema({
    firstName: String,
    // if you want to specify that a certain property MUST be included, or that it can't be null, you can't just write Number, you need to specify an object
    age: {
        type: Number,
        // this makes it so that age MUST be included in all documents
        required: true,
        // we can specify a minimum and maximum number for age
        min: 1,
        max: 129
    },
    email: {
        type: String,
        // this will automatically convert all characters in the string to lowercase
        // can use uppercase: true as well for the opposite effect
        lowercase: true,
        // we can set a min length and max length for a string
        minLength: 5,
        maxLength: 45,
        // we can run our own validation
        validate: {
            // here you write a function that returns true or false, if it returns true then no error will occur, if it returns false an error will occur
            // the placeholder is whatever is written as the value for 'email'
            validator: email => {
              if(email.includes('@')) {
                return true
              } else {
                return false
              }
            }
        }
    },
    // dates can be used in schema
    createdAt: {
        type: Date,
        // if createdAt is not specified, we can set a default value
        default: new Date(),
        // this property makes it so that the createdAt property can never be changed
        immutable: true
    },
    updatedAt: Date,
    // In order to identify who a person's best friend is, we will use that best friend's objectId that is automatically generated by mongoDB
    // this objectId is itself a different data type
    bestFriend: {
        type: mongoose.SchemaTypes.ObjectId,
        // this ref property tells mongoose what model are we refering to for the ObjectId above 
        ref: 'User'
    },
    // to define an array, we just use [], if we left it blank, we are specifying that it could be an array of any and all datatypes, because we specified it is a String, the elements can only be strings
    hobbies: [String],
    // we can also nest document properties, so here we have an address object, that has two strings as properties
    address: {
        street: String,
        city: String
    }
})

// then we need to create the model FOR THIS schema
// first argument is the name of the model, this is the name that will show up in the actual mongoDB database, and the second argument is the relevant schema
const User = mongoose.model("User", userSchema)

// export it
module.exports = User;



// remember, there are many ways to create a document in mongoose, and validation will only occur when you create a document through the User() constructor or User.create()